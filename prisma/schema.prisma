// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STARTUP
  BUSINESS
}

model User {
  id          String  @id @default(uuid())
  name        String
  email       String?  @unique
  phoneNumber String?  @unique
  password    String?
  image       String  @default("https://res.cloudinary.com/dlriuadjv/image/upload/v1729353205/xbbb0zw6js60dxnq64qj.png")
  preferences String[]

  accounts    Account[]
  sessions    Session[]

  emailVerified DateTime?
  type        UserType?

  startup  Startup?
  business Business?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Otp {
  id        String  @id @default(uuid())
  email     String?
  phoneNumber String?
  otp       String
  expiry    DateTime
}

model Startup {
  id               String  @id @default(uuid())
  userId           String  @unique
  name             String
  registeredName   String?
  websiteUrl       String?
  contactEmail     String?
  contactNumber    String
  location         String
  industry         String
  sector           String
  trlLevel         String
  logoUrl          String?
  description      String?
  progressStage    String?
  fundingStage     String?
  idea             String?
  problemStatement String?
  potentialMarket  String?
  dpitRecognized   Boolean?
  majorCompetitor  String?
  demoVideoUrl     String?
  pitchDeckUrl     String?
  foundersName     String?
  teamSize         Int?
  fteEmployee      Int?
  pteEmployee      Int?

  user        User         @relation(fields: [userId], references: [id])
  competitors Competitor[]

  @@map("startup")
}

model Competitor {
  id          String @id @default(uuid())
  name        String
  description String
  startupId   String

  startup Startup @relation(fields: [startupId], references: [id])

  @@map("competitor")
}

model Business {
  id             String   @id @default(uuid())
  userId         String   @unique
  name           String
  registeredName String?
  websiteUrl     String?
  contactNumber  String
  location       String
  stdCode        String
  category     String
  categoryTags   String[]

  user User @relation(fields: [userId], references: [id])

  @@map("business")
}

model Opportunity {
  id                 String    @id @default(uuid())
  imageUrl           String?
  type               String
  subtype            String?
  title              String
  websiteUrl         String?
  fundingAmount      String?
  targetIndustry     String?
  targetSector       String?
  targetWomenFounder Boolean?
  targetProductStage String?
  targetFundingStage String?
  description        String?
  eligibility        String?
  bannerUrl          String?
  startDatetime      DateTime
  endDatetime        DateTime?
  noOfRegistrations  Int?

  @@map("opportunity")
}
